# Задача №31. Решение в группах
# Последовательностью Фибоначчи называется последовательность чисел 
# a0, a1, ..., an, ..., где
# a0 = 0,a1 = 1,ak = ak-1 + ak-2 (k > 1).
# Требуется найти N-е число Фибоначчи
# Input: 7 (пользователь вводит индекс)
# Output: 21
# Задание необходимо решать через рекурсию

# любую рекурсию можно сравнить с циклом while
# нужно искать точку остановки

# рекурсивное решение последовательности фибоначи очень долгое, не выгодное

# def fib(n):
#    if n == 0 or n == 1:
#       return 1
#    return fib(n - 1) + fib(n - 2)


# n = int(input())
# print(fib(n))

# fib(4) - fib(3) + fib(2) = 2 + 1 + 1 + 1 = 5
#            |         |
#  fib(2) +    fib(1)    fib(1) + fib(0)
#    |             |         |       |
#fib(1) + fib(0)   1         1       1
#  1 +    1

# Задача №33. Решение в группах
# Хакер Василий получил доступ к классному журналу и
# хочет заменить все свои минимальные оценки на
# максимальные. Напишите программу, которая
# заменяет оценки Василия, но наоборот: все
# максимальные – на минимальные.
# Input: 5 -> 1 3 3 3 4
# Output: 1 3 3 3 1

# польз вводит значение - кол-во оценок
# список - чему равен минимум и максимум
# заменить мак на мин знач
# решение списком

# def vasia(array):
#    min_numbers = min(array)
#    max_numbers = max(array)
#    for i in range(len(array)):
#       if array[i] == max_numbers: # здесь если элемент = макс оценка
#          array[i] = min_numbers # присваиваем минимальное значение этому элементу
#    return array

# n = int(input())
# list_1 = [int(i) for i in input().split()][:n]
# print(*vasia(list_1))

# Задача №35. Решение в группах
# Напишите функцию, которая принимает одно число и
# проверяет, является ли оно простым
# Напоминание: Простое число - это число, которое
# имеет 2 делителя: 1 и n(само число)
# Input: 5
# Output: yes

# простое число делится на 1 и само себя
#  от 2 до n/2 - все делители числа
#  если от 2 до n/2 - число простое и имеет 2 делителя

# - число простое
# - число составное
# использовать return

# 1 - не простое и не составное, ЕГО НЕ ПРОВЕРЯЕМ

# def IsPrime(n):
#    for i in range(2, n // 2 + 1):
#       if n % i == 0:
#          return 'no'
#    return 'yes'

# n = int(input())
# print(IsPrime(n))

# Задача №37. Решение в группах
# Дано натуральное число N и
# последовательность из N элементов.
# Требуется вывести эту последовательность в
# обратном порядке.
# Примечание. В программе запрещается
# объявлять массивы и использовать циклы
# (даже для ввода и вывода).
# Input: 2 -> 3 4
# Output: 4 3
# полностью оформить через рекурсию. Через строки

# def reverse_numbers(n):
#    if n == 0:
#       return ''
#    k = input()
#    return reverse_numbers(n - 1) + f' {k}'


# n = int(input())
# print(reverse_numbers(n))

# r(2) -> r(1) + " 3" = " 4" + " 3" = " 4 3"
#          |
#         r(0) + " 4" = "" + " 4" = " 4"
#          |
#          ''

